{"version":3,"sources":["assets/images/spacex_logo.svg","assets/images/satellite.svg","reportWebVitals.js","components/Header.js","constants.js","components/SatSetting.js","components/SatelliteList.js","components/WorldMap.js","components/Main.js","components/Footer.js","components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Header","react_default","a","createElement","className","src","spacex_logo","alt","Component","SAT_API_KEY","STARLINK_CATEGORY","NEARBY_SATELLITE","BASE_URL","SatSettingForm","showSatellite","preventDefault","_this","props","form","validateFields","err","values","onShow","getFieldDecorator","this","es_form","Object","assign","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","message","input_number","min","max","style","width","placeholder","es_button","type","htmlType","textAlign","SatSetting1","Form","create","name","SatelliteList","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","_e$target","target","dataInfo","checked","selected","state","list","addOrRemove","setState","item","status","found","some","entry","satid","concat","toConsumableArray","filter","onShowSatMap","onShowMap","_this2","satList","satInfo","above","isLoad","size","disabled","length","onClick","spin","tip","es_list","itemLayout","dataSource","renderItem","actions","es_checkbox","Meta","avatar","satellite","title","satname","description","launchDate","height","WorldMap","track","data","hasOwnProperty","Error","len","positions","context2","observerData","duration","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","_this$map","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","geoKavrayskiy7","scale","translate","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","isLoading","d3Scale","schemeCategory10","React","createRef","axios","get","res","feature","objects","countries","features","catch","console","log","prevProps","prevState","snapshot","_this3","satData","_this$props$observerD","latitude","longitude","elevation","endTime","altitude","urls","url","Promise","all","arr","ref","Main","showMap","preState","objectSpread","showNearbySatellite","setting","isLoadingList","fetchSatellite","response","error","_this$state","row","col","SatSetting","components_SatelliteList","components_WorldMap","Footer","App","components_Header","components_Footer","components_Main","ReactDOM","createRoot","getElementById","render","components_App"],"mappings":"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","file":"static/js/main.aa3b096b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex_logo.223d880a.svg\";","module.exports = __webpack_public_path__ + \"static/media/satellite.141ccf71.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {Component} from 'react';\nimport spacex_logo  from '../assets/images/spacex_logo.svg';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={spacex_logo} className=\"App-logo\" alt=\"logo\" />\n                <p className=\"title\">\n                    StarLink Tracker\n                </p>\n            </header>\n        );\n    }\n}\nexport default Header;\n","\nexport const SAT_API_KEY = \"FEF2DU-RUM2QC-AD9RGJ-4V9M\";\n\nexport const STARLINK_CATEGORY = \"52\";\n\nexport const NEARBY_SATELLITE = \"rest/v1/satellite/above\";\n\nexport const BASE_URL = \"http://34.228.12.97\"; \n\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\n\nexport const SATELLITE_POSITION_URL = \"rest/v1/satellite/positions\";\n\n","import React, {Component} from 'react';\nimport {Form, Button, InputNumber} from 'antd';\n\nclass SatSettingForm extends Component {\n\n   render() {\n       const {getFieldDecorator} = this.props.form;\n       const formItemLayout = {\n           labelCol: {\n               xs: { span: 24 },\n               sm: { span: 11 },\n           },\n           wrapperCol: {\n               xs: { span: 24 },\n               sm: { span: 13 },\n           },\n       };\n       return (\n           <Form {...formItemLayout} className=\"sat-setting\" onSubmit={this.showSatellite}>\n               <Form.Item label=\"Longitude(degrees)\">\n                   {\n                       getFieldDecorator(\"longitude\", {\n                           rules: [\n                               {\n                                   required: true,\n                                   message: \"Please input your Longitude\",\n                               }\n                           ],\n                       })(<InputNumber min={-180} max={180}\n                                       style={{width: \"100%\"}}\n                                       placeholder=\"Please input Longitude\"\n                       />)\n                   }\n               </Form.Item>\n\n               <Form.Item label=\"Latitude(degrees)\">\n                   {\n                       getFieldDecorator(\"latitude\", {\n                           rules: [\n                               {\n                                   required: true,\n                                   message: \"Please input your Latitude\",\n                               }\n                           ],\n                       })(<InputNumber placeholder=\"Please input Latitude\"\n                                       min={-90} max={90}\n                                       style={{width: \"100%\"}}\n                       />)\n                   }\n               </Form.Item>\n\n               <Form.Item label=\"Elevation(meters)\">\n                   {\n                       getFieldDecorator(\"elevation\", {\n                           rules: [\n                               {\n                                   required: true,\n                                   message: \"Please input your Elevation\",\n                               }\n                           ],\n                       })(<InputNumber placeholder=\"Please input Elevation\"\n                                       min={-413} max={8850}\n                                       style={{width: \"100%\"}}\n                       />)\n                   }\n               </Form.Item>\n\n               <Form.Item label=\"Altitude(degrees)\">\n                   {\n                       getFieldDecorator(\"altitude\", {\n                           rules: [\n                               {\n                                   required: true,\n                                   message: \"Please input your Altitude\",\n                               }\n                           ],\n                       })(<InputNumber placeholder=\"Please input Altitude\"\n                                       min={0} max={90}\n                                       style={{width: \"100%\"}}\n                       /> )\n                   }\n               </Form.Item>\n\n               <Form.Item label=\"Duration(secs)\">\n                   {\n                       getFieldDecorator(\"duration\", {\n                           rules: [\n                               {\n                                   required: true,\n                                   message: \"Please input your Duration\",\n                               }\n                           ],\n                       })(<InputNumber placeholder=\"Please input Duration\" min={0} max={90} style={{width: \"100%\"}} />)\n                   }\n               </Form.Item>\n               <Form.Item className=\"show-nearby\">\n                   <Button type=\"primary\" htmlType=\"submit\" style={{textAlign: \"center\"}}>\n                       Find Nearby Satellite\n                   </Button>\n               </Form.Item>\n           </Form>\n       );\n   }\n\n   showSatellite = e => {\n       e.preventDefault();\n       this.props.form.validateFields((err, values) => {\n           if (!err) {\n               // console.log('Received values of form: ', values);\n               this.props.onShow(values);\n           }\n       });\n   }\n}\n\nconst SatSetting1 = Form.create({name: 'satellite-setting'})(SatSettingForm)\n\nexport default SatSetting1;","import React, {Component} from 'react';\nimport { List, Avatar, Button, Checkbox, Spin } from 'antd';\nimport satellite from \"../assets/images/satellite.svg\";\n\nclass SatelliteList extends Component {\n    constructor(){\n        super();\n        this.state = {\n            selected: []\n        };\n    }\n\n    onChange = e => {\n        const { dataInfo, checked } = e.target;\n        const { selected } = this.state;\n        const list = this.addOrRemove(dataInfo, checked, selected);\n        this.setState({ selected: list })\n    }\n\n    addOrRemove = (item, status, list) => {\n        const found = list.some( entry => entry.satid === item.satid);\n        if(status && !found){\n            list=[...list, item]\n        }\n\n        if(!status && found){\n            list = list.filter( entry => {\n                return entry.satid !== item.satid;\n            });\n        }\n        return list;\n    }\n\n    onShowSatMap = () =>{\n        this.props.onShowMap(this.state.selected);\n    }\n\n    render() {\n        const satList = this.props.satInfo ? this.props.satInfo.above : [];\n        const { isLoad } = this.props;\n        const { selected } = this.state;\n\n        return (\n            <div className=\"sat-list-box\">\n                <Button className=\"sat-list-btn\"\n                        size=\"large\"\n                        disabled={ selected.length === 0}\n                        onClick={this.onShowSatMap}\n                >Track on the map</Button>\n                <hr/>\n\n                {\n                    isLoad ?\n                        <div className=\"spin-box\">\n                            <Spin tip=\"Loading...\" size=\"large\" />\n                        </div>\n                        :\n                        <List\n                            className=\"sat-list\"\n                            itemLayout=\"horizontal\"\n                            size=\"small\"\n                            dataSource={satList}\n                            renderItem={item => (\n                                <List.Item\n                                    actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}\n                                >\n                                    <List.Item.Meta\n                                        avatar={<Avatar size={50} src={satellite} />}\n                                        title={<p>{item.satname}</p>}\n                                        description={`Launch Date: ${item.launchDate}`}\n                                    />\n\n                                </List.Item>\n                            )}\n                        />\n                }\n            </div>\n        );\n    }\n}\n\nexport default SatelliteList;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n  BASE_URL,\n  WORLD_MAP_URL,\n  SATELLITE_POSITION_URL,\n  SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    axios\n      .get(WORLD_MAP_URL)\n      .then(res => {\n        const { data } = res;\n        const land = feature(data, data.objects.countries).features;\n        this.generateMap(land);\n      })\n      .catch(e => {\n        console.log(\"err in fetch map data \", e.message);\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60;\n\n      this.setState({\n        isLoading: true\n      });\n\n      const urls = this.props.satData.map(sat => {\n        const { satid } = sat;\n        const url = `${BASE_URL}/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n        return axios.get(url);\n      });\n\n      Promise.all(urls)\n        .then(res => {\n          const arr = res.map(sat => sat.data);\n          this.setState({\n            isLoading: false,\n            isDrawing: true\n          });\n\n          if (!prevState.isDrawing) {\n            this.track(arr);\n          } else {\n            const oHint = document.getElementsByClassName(\"hint\")[0];\n            oHint.innerHTML =\n              \"Please wait for these satellite animation to finish before selection new ones!\";\n          }\n        })\n        .catch(e => {\n          console.log(\"err in fetch satellite position -> \", e.message);\n        });\n    }\n  }\n\n  track = data => {\n    if (!data[0].hasOwnProperty(\"positions\")) {\n      throw new Error(\"no position data\");\n      return;\n    }\n\n    const len = data[0].positions.length;\n    const { duration } = this.props.observerData;\n    const { context2 } = this.map;\n\n    let now = new Date();\n\n    let i = 0;\n\n    let timer = setInterval(() => {\n      let ct = new Date();\n\n      let timePassed = i === 0 ? 0 : ct - now;\n      let time = new Date(now.getTime() + 60 * timePassed);\n\n      context2.clearRect(0, 0, width, height);\n\n      context2.font = \"bold 14px sans-serif\";\n      context2.fillStyle = \"#333\";\n      context2.textAlign = \"center\";\n      context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n      if (i >= len) {\n        clearInterval(timer);\n        this.setState({ isDrawing: false });\n        const oHint = document.getElementsByClassName(\"hint\")[0];\n        oHint.innerHTML = \"\";\n        return;\n      }\n\n      data.forEach(sat => {\n        const { info, positions } = sat;\n        this.drawSat(info, positions[i]);\n      });\n\n      i += 60;\n    }, 1000);\n  };\n\n  drawSat = (sat, pos) => {\n    const { satlongitude, satlatitude } = pos;\n\n    if (!satlongitude || !satlatitude) return;\n\n    const { satname } = sat;\n    const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n    const { projection, context2 } = this.map;\n    const xy = projection([satlongitude, satlatitude]);\n\n    context2.fillStyle = this.color(nameWithNumber);\n    context2.beginPath();\n    context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n    context2.fill();\n\n    context2.font = \"bold 11px sans-serif\";\n    context2.textAlign = \"center\";\n    context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <div className=\"map-box\">\n        {isLoading ? (\n          <div className=\"spinner\">\n            <Spin tip=\"Loading...\" size=\"large\" />\n          </div>\n        ) : null}\n        <canvas className=\"map\" ref={this.refMap} />\n        <canvas className=\"track\" ref={this.refTrack} />\n        <div className=\"hint\" />\n      </div>\n    );\n  }\n\n  generateMap = land => {\n    const projection = geoKavrayskiy7()\n      .scale(170)\n      .translate([width / 2, height / 2])\n      .precision(0.1);\n\n    const graticule = geoGraticule();\n\n    const canvas = d3Select(this.refMap.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const canvas2 = d3Select(this.refTrack.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const context = canvas.node().getContext(\"2d\");\n    const context2 = canvas2.node().getContext(\"2d\");\n\n    let path = geoPath()\n      .projection(projection)\n      .context(context);\n\n    land.forEach(ele => {\n      context.fillStyle = \"#B3DDEF\";\n      context.strokeStyle = \"#000\";\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n\n      context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context2\n    };\n  };\n}\n\nexport default WorldMap;\n","import React, {Component} from 'react';\nimport { Row, Col } from 'antd';\nimport axios from 'axios';\nimport {BASE_URL, NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from '../constants';\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport WorldMap from './WorldMap';\n\nclass Main extends Component {\n    constructor(){\n        super();\n        this.state = {\n            satInfo: null,\n            satList: null,\n            setting: null,\n            isLoadingList: false\n        }\n    }\n    render() {\n        const { isLoadingList, satInfo, satList, setting } = this.state;\n        return (\n            <Row className='main'>\n                <Col span={8} className=\"left-side\">\n                    <SatSetting onShow={this.showNearbySatellite}/>\n                    <SatelliteList isLoad={isLoadingList}\n                                   satInfo={satInfo}\n                                   onShowMap={this.showMap} />\n                </Col>\n                <Col span={16} className=\"right-side\">\n                    <WorldMap satData={satList} observerData={setting} />\n                </Col>\n            </Row>\n        );\n    }\n\n    showMap = (selected) => {\n        this.setState(preState => ({\n            ...preState,\n            satList: [...selected]\n        }))\n    }\n\n    showNearbySatellite = (setting) => {\n        this.setState({\n            isLoadingList: true,\n            setting: setting\n        })\n        this.fetchSatellite(setting);\n    }\n\n    fetchSatellite= (setting) => {\n        const {latitude, longitude, elevation, altitude} = setting;\n        const url = `${BASE_URL}/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n\n   this.setState({\n       isLoadingList: true\n   });\n\n   axios.get(url)\n       .then(response => {\n           console.log(response.data)\n           this.setState({\n               satInfo: response.data,\n               isLoadingList: false\n           })\n       })\n       .catch(error => {\n           console.log('err in fetch satellite -> ', error);\n       })\n    }\n}\nexport default Main;\n","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                ©2020 StarLink Tracker. All Rights Reserved. Website Made by Xingda Bao\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Footer />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './components/App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}